/* Copyright 2011 Google Inc. All Rights Reserved. */
var igdx_wordData = {},
	igdx_selectedWord = null,
	dragActive = false,
	positionX = 15,
	positionY = 30,
	downX,
	downY;
var igdx_primaryBox = null,
	igdx_tabHeader = null,
	igdx_definitionContainer = null;
var igdx_wordCache = {
	list: [null, null, null],
	top: () => igdx_wordCache.list[0],
	push: word => {
		const wordIndex = igdx_wordCache.list.indexOf(word);
		switch(wordIndex) {
			case -1:
				igdx_wordCache.list.pop(); // remove last item
				igdx_wordCache.list.unshift(word); // push in new item at the front of the list
				return;

			case 0:
				// do nothing!
				return;

			default:
				// word is in the cache!
				igdx_wordCache.list =
					igdx_wordCache
					.list
					.filter(		// remove word from its current position
						(_, i) => i !== wordIndex
					);
				igdx_wordCache.list.unshift(word); // push in new item at the front of the list
		}
	}
}
const customWordDictionary = {
	secretome: {
		meanings: [{
			partOfSpeech: "noun",
			definitions: [{
				antonyms: [],
				definition: "set of proteins expressed by an organism and secreted into the extracellular space",
				example: "the secretome of a specific tissue can be measured by mass spectrometry",
				synonyms: []
			}]
		}],
		origin: "Modern medical nickname coined in 2004 by researchers",
		phonetic: "",
		phonetics: [],
		success: true,
		word: "secretome"
	},
	secretory: {
		meanings: [{
			partOfSpeech: "adjective",
			definitions: [{
				antonyms: [],
				definition: "of, relating to, or promoting secretion",
				example: null,
				synonyms: []
			}, {
				antonyms: [],
				definition: "produced by secretion",
				example: null,
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [{
			text: "sē-krə-ˌtȯr-ē",
			audio: "//media.merriam-webster.com/audio/prons/en/us/mp3/s/secret14.mp3"
		}],
		success: true,
		word: "secretory"
	},
	senescent: {
		meanings: [{
			partOfSpeech: "adjective",
			definitions: [{
				antonyms: [],
				definition: "growing old; aging",
				example: null,
				synonyms: []
			}, {
				antonyms: [],
				definition: "Cell Biology. (of a cell) no longer capable of dividing but still alive and metabolically active",
				example: null,
				synonyms: []
			}]
		}],
		origin: "Latin senēscent- (stem of senēscēns )",
		phonetic: "",
		phonetics: [{
			text: "sɪˈnɛs ənt ",
			audio: "//static.sfdict.com/audio/lunawav/S03/S0333900.ogg"
		}],
		success: true,
		word: "senescent"
	},
	chemokine: {
		meanings: [{
			partOfSpeech: "noun",
			definitions: [{
				antonyms: [],
				definition: "any of a class of cytokines with functions that include attracting white blood cells to sites of infection",
				example: "the main function of chemokines is to manage the migration of leukocytes",
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [],
		success: true,
		word: "chemokine"
	},
	immunosurveillance: {
		meanings: [{
			partOfSpeech: "noun",
			definitions: [{
				antonyms: [],
				definition: "processes by which cells of the immune system look for and recognise foreign pathogens, such as bacteria and viruses, or pre-cancerous and cancerous cells in the body",
				example: null,
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [{
			text: "im'yū-nō-sŭr-vā'lans"
		}],
		success: true,
		word: "immunosurveillance"
	},
	hypophosphorylation: {
		meanings: [{
			partOfSpeech: "noun",
			definitions: [{
				antonyms: [],
				definition: "(biochemistry) Phosphorylation to a less than normal extent, or less than fully",
				example: null,
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [],
		success: true,
		word: "hypophosphorylation"
	},
	overexpressed: {
		meanings: [{
			partOfSpeech: "verb",
			definitions: [{
				antonyms: [],
				definition: "(biology) make too many copies of a protein or other substance",
				example: null,
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [],
		success: true,
		word: "overexpress"
	},
	immunoclearance: {
		meanings: [{
			partOfSpeech: "noun",
			definitions: [{
				antonyms: [],
				definition: " (immunology, pathology) the disappearance of an immunological condition",
				example: null,
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [],
		success: true,
		word: "immunoclearance"
	},
	preneoplastic: {
		meanings: [{
			partOfSpeech: "adjective",
			definitions: [{
				antonyms: [],
				definition: "existing or occurring prior to the formation of a neoplasm",
				example: "preneoplastic cells",
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [{
			text: "prē-nē'ō-plas'tik"
		}],
		success: true,
		word: "preneoplastic"
	},
	transcriptional: {
		meanings: [{
			partOfSpeech: "noun",
			definitions: [{
				antonyms: [],
				definition: "(genetics) the synthesis of messenger RNA from a DNA template through the formation of base pairs, resulting in a transfer of genetic information that codes for amino acid sequences composing proteins",
				example: null,
				synonyms: []
			}, {
				antonyms: [],
				definition: "something that has been transcribed",
				example: null,
				synonyms: []
			}, {
				antonyms: [],
				definition: "a recorded radio or television program",
				example: null,
				synonyms: []
			}, {
				antonyms: [],
				definition: "(music) an adaptation of a composition",
				example: "the conductor orchestrated a beautiful transcriptional based on Beethoven's fifth symphony",
				synonyms: []
			}, {
				antonyms: [],
				definition: "(linguistics) a representation of speech sounds in phonetic symbols",
				example: null,
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [],
		success: true,
		word: "transcriptional"
	},
	diffeomorphism: {
		meanings: [{
			partOfSpeech: "noun",
			definitions: [{
				antonyms: [],
				definition: "(mathematics) an isomorphism of smooth manifolds",
				example: null,
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [],
		success: true,
		word: "diffeomorphism"
	},
	diffeomorphic: {
		meanings: [{
			partOfSpeech: "adjective",
			definitions: [{
				antonyms: [],
				definition: "(mathematics) of two or more manifolds, indicating there exists a diffeomorphism between them",
				example: "two diffeomorphic manifolds",
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [],
		success: true,
		word: "diffeomorphic"
	},
	bandlimited: {
		meanings: [{
			partOfSpeech: "adjective",
			definitions: [{
				antonyms: [],
				definition: "the limiting of a signal's frequency domain representation or spectral density to zero above a certain finite frequency",
				example: null,
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [],
		success: true,
		word: "bandlimited"
	},
	parametrization: {
		meanings: [{
			partOfSpeech: "noun",
			definitions: [{
				antonyms: [],
				definition: "a mathematical process consisting of expressing the state of a system, process or model as a function of some independent quantities called parameters",
				example: null,
				synonyms: []
			}]
		}],
		origin: "",
		phonetic: "",
		phonetics: [],
		success: true,
		word: "parametrization"
	}
}
const enableOpacity = false
	  primaryBoxWidth = 300,
	  primaryBoxHeight = 225;
(function () {
	var e, k = function (a) {
			return a.replace(/^\s+|\s+$/g, "")
		},
		t = function (a) {
			if (a && a.tagName) {
				var b = a.tagName.toLowerCase();
				if ("input" === b || "textarea" === b) return !0
			}
			if (document.designMode && "on" === document.designMode.toLowerCase()) return !0;
			for (; a; a = a.parentNode)
				if (a.isContentEditable) return !0;
			return !1
		},
		u = function (a, b) {
			var c = new XMLHttpRequest;
			c.open("GET", a, !0);
			c.onload = function () {
				var d = null;
				200 === c.status && (d = c.response);
				return b(d)
			};
			c.send()
		},
		v = RegExp("[0-9A-Za-z]"),
		y = function () {
			u(chrome.runtime.getURL("content.min.css"),
				function (a) {
					var b = function (c) {
						this.P = c.instanceId;
						this.O = a;
						c = document.createElement("div");
						var d = document.createElement("a");
						d.target = "_blank";
						this.K = c.cloneNode(!1);
						this.H = document.createElement("audio");
						this.H.preload = !0;
						this.l = c.cloneNode(!1);
						this.l.id = "gdx-bubble-host";
						this.J = this.l.attachShadow({
							mode: "open"
						});
						var g = document.createElement("style");
						g.innerHTML = this.O;
						this.J.appendChild(g);
						this.g = c.cloneNode(!1);
						this.g.id = "gdx-bubble-main";
						this.J.appendChild(this.g);
						this.j = c.cloneNode(!1);
						this.j.id =
							"gdx-bubble-query-row";
						this.I = c.cloneNode(!1);
						this.I.id = "gdx-bubble-query";
						this.o = c.cloneNode(!1);
						this.o.id = "gdx-bubble-audio-icon";
						this.j.appendChild(this.I);
						this.j.appendChild(this.o);
						this.u = c.cloneNode(!1);
						this.u.id = "gdx-bubble-meaning";
						this.i = c.cloneNode(!1);
						this.i.id = "gdx-bubble-options-tip";
						this.i.innerHTML = 'Tip: Didn\'t want this definition pop-up? Try setting a trigger key in <a href="#">Extension Options</a>.';
						this.v = c.cloneNode(!1);
						this.v.id = "gdx-bubble-more";
						this.m = d.cloneNode(!1);
						this.v.appendChild(this.m);
						this.h = c.cloneNode(!1);
						this.h.id = "gdx-bubble-attribution";
						this.B = d.cloneNode(!1);
						this.D = c.cloneNode(!1);
						this.h.appendChild(this.B);
						this.h.appendChild(this.D);
						this.F = c.cloneNode(!1);
						this.F.id = "gdx-bubble-close";
						this.g.appendChild(this.F);
						this.g.appendChild(this.j);
						this.g.appendChild(this.u);
						this.g.appendChild(this.i);
						this.g.appendChild(this.h);
						this.g.appendChild(this.v);
						this.G = c.cloneNode(!1);
						this.J.appendChild(this.G);
						this.N = w(c, "up");
						this.M = w(c, "down");
						x(this)
					}.bind(this);
					chrome.runtime.sendMessage({
							type: "initialize"
						},
						b)
				}.bind(this))
		},
		x = function (a) {
			a.L = a.T.bind(a);
			window.addEventListener("resize", a.s.bind(a));
			document.addEventListener("mouseup", a.V.bind(a));
			document.addEventListener("dblclick", a.R.bind(a));
			document.addEventListener("keydown", a.U.bind(a));
			a.F.onclick = a.s.bind(a);
			a.o.onclick = function () {
				this.H.play()
			}.bind(a);
			a.i.querySelector("a").onclick = function () {
				chrome.runtime.sendMessage({
					type: "openOptionsPage"
				}, function () {});
				return !1
			};
			var b = function (c) {
				c.preventDefault();
				c.stopPropagation()
			};
			a.o.onmousedown =
				b;
			a.F.onmousedown = b;
			chrome.runtime.onMessage.addListener(C);
			chrome.runtime.onMessage.addListener(a.L)
		},
		w = function (a, b) {
			var c = a.cloneNode(!1),
				d = a.cloneNode(!1);
			a = a.cloneNode(!1);
			c.id = "gdx-arrow-main";
			"up" === b ? (d.id = "gdx-bubble-arrow-inner-up", a.id = "gdx-bubble-arrow-outer-up") : (d.id = "gdx-bubble-arrow-inner-down", a.id = "gdx-bubble-arrow-outer-down");
			c.appendChild(d);
			c.appendChild(a);
			return c
		},
		E = function (a) {
			a.g.style.left = "0";
			a.g.style.top = "0";
			var b = a.g.offsetWidth,
				c = a.g.offsetHeight,
				d = [window.pageXOffset,
					window.pageYOffset
				],
				g = d[0],
				f = [a.A.left + g, a.A.top + d[1]],
				n = a.A.bottom - a.A.top,
				z = f[0] + (a.A.right - a.A.left) / 2;
			d = g + document.documentElement.offsetWidth;
			var l = z - b / 2;
			l + b > d && (l = d - b);
			l < g && (l = g);
			var r = f[1] - c - 12 + 1,
				m = f[1] + n + 12 - 1;
			a: if (b = new D(r, l + b, r + c, l), b.top < window.pageYOffset) b = !1;
				else {
					c = document.getElementsByTagName("embed");
					var A = document.getElementsByTagName("object"),
						p = [window.pageXOffset, window.pageYOffset],
						B = p[0];
					p = p[1];
					for (var q = 0, L = c.length + A.length; q < L; q++) {
						var h = (q < c.length ? c[q] : A[q - c.length]).getBoundingClientRect();
						h = new D(h.top + p, h.right + B, h.bottom + p, h.left + B);
						if (b.bottom > h.top && h.bottom > b.top && b.left < h.right && h.left < b.right) {
							b = !1;
							break a
						}
					}
					b = !0
				} b ? (m = a.M, m.style.top = f[1] - 12 + "px") : (r = m, m = a.N, m.style.top = f[1] + n + "px");
			f = z - 12;
			m.style.left = f + "px";
			f - 5 > g && f + 24 + 5 < d && a.G.appendChild(m);
			a.g.style.top = r + "px";
			a.g.style.left = l + "px"
		};
	y.prototype.S = function (definition) {
		definition.word = decodeURIComponent(definition.word);
		const customDef = customWordDictionary[definition.word];
		if(customDef) {
			// either the defined word exists in our custom dictionary;
			// use our definition
			definition = customDef;
		} else if(!definition.success) {
			// the API couldn't find a definition for the word, and it's
			// it's also not in our custom dictionary
			definition = {
				meanings: [{
					partOfSpeech: "Unknown",
					definitions: [{
						antonyms: [],
						definition: "No definition could be found for this word.",
						example: null,
						synonyms: []
					}]
				}],
				origin: "Unknown",
				phonetic: "",
				phonetics: [],
				success: true,
				word: definition.word
			}
		}

		// user is focused on the popup
		function onFocusGain() {

		}

		// user is no longer focused on the popup
		function onFocusLoss() {

		}

		// Updates the display
		function update() {
			const selectedWordObj = igdx_wordData[igdx_selectedWord];

			// draw header tabs
			for(let index = 0; index < 3; index++) {
				igdx_tabHeader
					.childNodes[0]
					.childNodes[index]
					.innerHTML = igdx_wordCache.list[index] || "";
			}

			// populate dropdown

			// draw phonetics
			igdx_definitionContainer
				.childNodes[0]
				.innerHTML =
					selectedWordObj
					.data
					.phonetics
					.map(({text, audio}) =>
						`<span hasAudio="${!!audio}" onclick="${audio ? `(new Audio('${audio}')).play(); return false;`: ""}">
							${text}
						</span>
						<br>`
					)
					.join("")
					.replace(/[\t\n]+/g, "");

			// draw part of speech
			const selectedWordMeanings =
				selectedWordObj
					.data
					.meanings[selectedWordObj.partOfSpeech];
			igdx_definitionContainer
				.childNodes[1]
				.childNodes[1]
				.innerHTML =
					selectedWordMeanings
						.partOfSpeech;

			// draw meanings
			igdx_definitionContainer
				.childNodes[2]
				.innerHTML = `
					<ol>${
						// object passed into map contains keys: antonyms (str arr), definition (str), example (str), synonyms (str arr)
						selectedWordMeanings
							.definitions
							.map(({ definition, example }) => `
								<li>
									<span><b>${definition || "Definition unavailable"}</b></span>
									<br>
									<span>Example: <i>${example || "Example usage unavailable."}</i></span>
								</li>
							`)
							.join("")
					}</ol>
				`.replace(/[\t\n]+/g, "");

			// resize meanings container
			igdx_definitionContainer
				.childNodes[2]
				.style
				.height =
					`${185 - igdx_definitionContainer.childNodes[1].offsetTop}px`;

			// ensure window is visible (particlarly important when user has x'ed out the popup)
			igdx_primaryBox
				.style
				.left = positionX + "px";
		}

		function chevronClickHandler(isLeft) {
			// -1 if left; 1 if right
			const offset = (-1 * isLeft) + (1 * !isLeft);
			const selectedWordObj = igdx_wordData[igdx_selectedWord];
			const proposedPosition = selectedWordObj.partOfSpeech + offset;
			if(proposedPosition > -1 && proposedPosition < selectedWordObj.data.meanings.length) {
				selectedWordObj.partOfSpeech = proposedPosition;
				update();
			}
		}

		// Bumps a word up to the most recently defined word
		function bumpDefinition(word) {
			igdx_selectedWord = definition.word;
			if(word) igdx_selectedWord = word;
			igdx_wordCache.push(igdx_selectedWord);
			update();
		}

		function addDefinition() {
			igdx_wordData[definition.word] = {
				data: definition,
				partOfSpeech: 0
			}
			bumpDefinition();
		}

		function igdx_init() {

			// the primary box contains three top button tabs and a
			// dropdown button to select from the 3 most recently
			// defined words and then a list of all defined words,
			// sorted alphabetically.
			igdx_primaryBox = document.createElement("div");
			igdx_primaryBox.setAttribute("id", "igdx_primaryBox");

			igdx_primaryBox.style.left = positionX + "px";
			igdx_primaryBox.style.top = positionY  + "px";

			igdx_tabHeader = document.createElement("div");
			igdx_tabHeader.setAttribute("id", "igdx_tabHeader");
			igdx_tabHeader.innerHTML = `
				<div style="width: calc(100% - 50px);">
					<span class="igdx_wordTab" style="color: #ff6e00;"></span>
					<span class="igdx_wordTab"></span>
					<span class="igdx_wordTab"></span>
				</div>
				<span id="igdx_tabControls">
					<span>&#119065;</span>
					<span>&#128473;</span>
				</span>
				<div id="igdx_grabBar"></div>
			`.replace(/[\t\n]+/g, "");

			igdx_tabHeader
				.childNodes[2]
				.onmousedown = function(downEvent) {
					downX = downEvent.clientX;
					downY = downEvent.clientY;
					dragActive = true;
				}

			document.onmousemove = function(moveEvent) {
				if(dragActive) {
					const tentativeX = positionX - downX + moveEvent.clientX;
					if(tentativeX > -1 && tentativeX < (window.innerWidth - primaryBoxWidth))
						igdx_primaryBox.style.left = tentativeX + "px";

					const tentativeY = positionY - downY + moveEvent.clientY;
					if(tentativeY > 25 && tentativeY < (window.innerHeight - primaryBoxHeight))
						igdx_primaryBox.style.top = tentativeY + "px";
				}
			}

			document.onmouseup = function() {
				if(dragActive) {
					positionX = parseInt(igdx_primaryBox.style.left);
					positionY = parseInt(igdx_primaryBox.style.top);
					dragActive = false;
				}
			}

			for(let i = 0; i < 3; i++) {
				igdx_tabHeader
					.childNodes[0]
					.childNodes[i]
					.onclick = function() {
						const word = igdx_wordCache.list[i];
						if(word !== null) {
							bumpDefinition(igdx_wordCache.list[i]);
						}
					}
			}

			// initialize click handler for the dropdown icon
			igdx_tabHeader
				.childNodes[1]
				.childNodes[0]
				.onclick = function() {
					console.log("dropdown clicked");
				}

			// initialize click handler for the "x" icon
			igdx_tabHeader
				.childNodes[1]
				.childNodes[1]
				.onclick = function() {
					igdx_primaryBox
						.style
						.left = "-1000px";
				}

			igdx_definitionContainer = document.createElement("div");
			igdx_definitionContainer.setAttribute("id", "igdx_definitionContainer");
			igdx_definitionContainer.innerHTML = `
				<div id="igdx_phoneticsContainer"></div>
				<div id="igdx_posContainer">
					<span class="igdx_chevron">&#9001;</span>
					<span></span>
					<span class="igdx_chevron">&#9002;</span>
				</div>
				<div id="igdx_meaningsContainer">
					<ol>
						<li>
							<span>Definition of a word</span>
							<br>
							<span>Example usage</span>
						</li>
						<li>
							<span>Definition of a word</span>
							<br>
							<span>Example usage</span>
						</li>
						<li>
							<span>Definition of a word</span>
							<br>
							<span>Example usage</span>
						</li>
						<li>
							<span>Definition of a word</span>
							<br>
							<span>Example usage</span>
						</li>
						<li>
							<span>Definition of a word</span>
							<br>
							<span>Example usage</span>
						</li>
						<li>
							<span>Definition of a word</span>
							<br>
							<span>Example usage</span>
						</li>
						<li>
							<span>Definition of a word</span>
							<br>
							<span>Example usage</span>
						</li>
					</ol>
				</div>
			`.replace(/[\t\n]+/g, "");

			igdx_definitionContainer.childNodes[1].childNodes[0].onclick = function() {
				chevronClickHandler.bind(this)(true);
			}
			igdx_definitionContainer.childNodes[1].childNodes[2].onclick = function() {
				chevronClickHandler.bind(this)(false);
			}

			igdx_primaryBox.appendChild(igdx_tabHeader);
			igdx_primaryBox.appendChild(igdx_definitionContainer);

			document.body.appendChild(igdx_primaryBox);

			var igdxStyles = document.createElement("style");
			document.head.appendChild(igdxStyles);
			var sheet = igdxStyles.sheet;

			sheet.insertRule(`
				#igdx_grabBar {
					position: absolute !important;
					left: -2px !important;
					top: -29px !important;
					padding-top: 25px;
					height: 0px !important;
					width: 100% !important;
					background: #c9c9c9 !important;
					cursor: move !important;
					border: 2px solid black;
					select: none !important;
				}
			`);
			sheet.insertRule(`
				#igdx_grabBar:hover {
					background: #f4f4f4 !important;
				}
			`);
			sheet.insertRule(`
				#igdx_grabBar:active {
					background: #aeaeae !important;
				}
			`);
			sheet.insertRule(`
				#igdx_tabHeader div {
					display: flex;
					flex-direction: row;
					align-items: center;
					height: 100%;
				}
			`);
			sheet.insertRule(`
				#igdx_tabHeader span.igdx_wordTab {
					position: absolute;
					top: 0px;
					right: 0px;
					width: 50px;
					min-height: 16px;
					text-align: center;
					cursor: pointer;
					user-select: none;
				}
			`);
			sheet.insertRule(`
				#igdx_tabHeader div span {
					position: relative !important;
					width: 33% !important;
					padding-top: 4px;
					padding-bottom: 4px;
					background: #c9c9c9;
					border: 2px solid #323;
				}
			`);
			sheet.insertRule(`
				#igdx_tabHeader span#igdx_tabControls {
					width: 50px;
					height: 26px;
					position: absolute;
					right: 0px;
					top: 0px;
					display: flex;
					flex-direction: row;
				}
			`);
			sheet.insertRule(`
				#igdx_tabHeader span#igdx_tabControls span {
					width: 50%;
					text-align: center;
					font-size: 14px;
					cursor: pointer;
					user-select: none;
				}
			`);
			sheet.insertRule(`
				#igdx_tabHeader span#igdx_tabControls span:hover {
					text-shadow: 2px 2px 4px;
				}
			`);
			sheet.insertRule(`
				#igdx_tabHeader div span:hover {
					background: #f4f4f4;
					font-weight: bold;
				}
			`);
			// styles for the primary containment box
			sheet.insertRule(`
				#igdx_primaryBox {
					display: flex;
					flex-direction: column;
					position: fixed;
					font-size: 13px;
					width: ${primaryBoxWidth}px;
					height: ${primaryBoxHeight}px;
					background-color: #ffffff;
					border: 2px solid black;
					opacity: ${enableOpacity ? 0.2 : 1};
					z-index: 4294967295; /* 2^32 - 1; browsers typically use 32 bit integers for z indices */
				}
			`);
			// styles for the primary containment box when it is hovered on
			if(enableOpacity)
				sheet.insertRule(`
					#igdx_primaryBox:hover {
						opacity: 1;
					}
				`);
			// styles for the tab header bar
			sheet.insertRule(`
				#igdx_primaryBox #igdx_tabHeader {
					height: 25px;
					width: 100%;
					border-bottom: 2px solid black;
				}
			`);
			// styles for the definition container window
			sheet.insertRule(`
				#igdx_primaryBox #igdx_definitionContainer {
					height: calc(100% - 20px);
					padding-bottom: 0px;
				}
			`);
			sheet.insertRule(`
				#igdx_posContainer .igdx_chevron {
					cursor: pointer;
					font-weight: bold;
					padding: 5px;
					border: 1px solid black;
					border-radius: 3px;
					user-select: none;
				}
			`);
			sheet.insertRule(`
				#igdx_posContainer .igdx_chevron:hover {
					color: #00ff00;
					border: 1px solid blue;
				}
			`);
			sheet.insertRule(`
				#igdx_posContainer {
					display: flex;
					flex-direction: row;
					justify-content: space-between;
					align-items: center;
					padding-left: 4px;
					padding-right: 4px;
					user-select: none;
				}
			`);
			sheet.insertRule(`
				#igdx_meaningsContainer {
					margin-top: 5px;
					padding-bottom: 5px;
					overflow-y: scroll;
					overflow-x: hidden;
					overflow-wrap: break-word;
				}
			`);
			sheet.insertRule(`
				#igdx_meaningsContainer ol {
					margin-left: 20px;
				}
			`);
			sheet.insertRule(`
				#igdx_phoneticsContainer span[hasAudio="true"]:after {
					content: "  (🕬 listen)";
					color: #0000ff;
					cursor: pointer;
				}
			`);
			sheet.insertRule(`
				#igdx_phoneticsContainer {
					user-select: none;
					padding: 4px;
				}
			`);
		}

		// If the global container element doesn't exist, create it
		if(!igdx_primaryBox)
			igdx_init();

		// If the word was successfully defined, add or bump the word
		if(definition.success) {
			if(!igdx_wordData[definition.word])
				addDefinition();
			else
				bumpDefinition();
		}

	};
	var F = function (a, b) {
			b === a.C && (a.u.textContent = "Dictionary is disabled for https pages.", a.m.href = "https://support.google.com/TODO", a.m.textContent = "More information »", a.v.className = "", a.j.className = "display-none", a.i.className = "display-none", a.h.className = "display-none", document.documentElement.appendChild(a.l), E(a))
		},
		G = function (a, b) {
			b = b.getBoundingClientRect();
			a.A = new D(b.top, b.right, b.bottom, b.left)
		};
	y.prototype.s = function () {
		this.C++;
		var a = this.l;
		a && a.parentNode && a.parentNode.removeChild(a);
		for (a = this.G; a && a.hasChildNodes();) a.removeChild(a.childNodes[0])
	};
	y.prototype.U = function (a) {
		27 === a.keyCode && this.s()
	};
	var H = function (a, b) {
			return "none" === b || "alt" === b && a.altKey || "ctrl" === b && (-1 !== window.navigator.platform.toLowerCase().indexOf("mac") ? a.metaKey : a.ctrlKey) || "shift" === b && a.shiftKey
		},
		I = function (a, b) {
			for (b = b.target; b; b = b.parentNode)
				if (b === a.l) return !0;
			return !1
		},
		K = function (a, b, c, d) {
			if ("mouseup" === c) var g = "true" === d.popupSelect && H(b, d.popupSelectKey);
			else "dblclick" === c ? g = "true" === d.popupSelect && H(b, d.popupSelectKey) ? !1 : "true" === d.popupDblclick && H(b, d.popupDblclickKey) : (console.warn("Unexpected eventType: " +
				c), g = !1);
			if (g) {
				g = 0;
				for (var f = J.length; g < f; g++)
					if (location.href.match(J[g])) return;
				if (!t(b.target)) {
					g = null;
					f = "";
					if (window.getSelection) {
						f = window.getSelection();
						if (1 > f.rangeCount) return;
						g = f.getRangeAt(0);
						f = k(f.toString())
					} else document.selection && (g = document.selection.createRange(), f = k(g.text));
					if (!(!f || 1 === f.length && 127 >= f.charCodeAt(0) && !f.match(v) || "dblclick" === c && -1 !== f.indexOf(" "))) {
						a.C++;
						var n = a.C;
						// ORIGINAL CODE
						// commented out to hide the default yellow box
						// I(a, b) || G(a, g);
						"false" === d.enableHttps && 0 === location.href.lastIndexOf("https", 0) ? F(a, n) : (window.setTimeout(function () {
							// ORIGINAL CODE
							// commented out to hide the default yellow box
							// n ===
							// 	this.C && (this.u.textContent = "Searching...", this.j.className = "display-none", this.i.className = "display-none", this.v.className = "display-none", this.h.className = "display-none", document.documentElement.appendChild(this.l), E(this))
						}.bind(a), 300), chrome.runtime.sendMessage({
							type: "fetch_raw",
							eventKey: n,
							instanceId: a.P,
							query: f
						}, a.S.bind(a)))
					}
				}
			}
		};
	y.prototype.V = function (a) {
		I(this, a) || this.s();
		var b = function (c) {
			K(this, a, "mouseup", c.options)
		}.bind(this);
		chrome.runtime.sendMessage({
			type: "options"
		}, b)
	};
	y.prototype.R = function (a) {
		var b = function (c) {
			K(this, a, "dblclick", c.options)
		}.bind(this);
		chrome.runtime.sendMessage({
			type: "options"
		}, b)
	};
	var C = function (a, b, c) {
		"get_selection" === a.type && (a = k(window.getSelection().toString())) && c({
			selection: a
		})
	};
	y.prototype.T = function (a) {
		"hide" === a.type && a.instanceId === this.P && this.s()
	};
	var J = [];
	e = y.prototype;
	e.O = "";
	e.C = 0;
	e.K = null;
	e.H = null;
	e.l = null;
	e.J = null;
	e.g = null;
	e.j = null;
	e.I = null;
	e.o = null;
	e.u = null;
	e.i = null;
	e.F = null;
	e.v = null;
	e.m = null;
	e.h = null;
	e.B = null;
	e.D = null;
	e.G = null;
	e.N = null;
	e.M = null;
	e.A = null;
	e.L = null;
	var D = function (a, b, c, d) {
			this.top = a;
			this.right = b;
			this.bottom = c;
			this.left = d
		},
		M = M || !1;
	if (!M) {
		if (window.gdxBubbleInstance) {
			var N = window.gdxBubbleInstance;
			chrome.runtime.onMessage.removeListener(C);
			chrome.runtime.onMessage.removeListener(N.L);
			N.s()
		}
		window.gdxBubbleInstance = new y
	};
})();
