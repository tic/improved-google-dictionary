/* Copyright 2011 Google Inc. All Rights Reserved. */
(function () {
	var l = function (a) {
			var b = 0;
			return function () {
				return b < a.length ? {
					done: !1,
					value: a[b++]
				} : {
					done: !0
				}
			}
		},
		p = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
			if (a == Array.prototype || a == Object.prototype) return a;
			a[b] = c.value;
			return a
		},
		q = function (a) {
			a = ["object" == typeof globalThis && globalThis, a, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global];
			for (var b = 0; b < a.length; ++b) {
				var c = a[b];
				if (c && c.Math == Math) return c
			}
			throw Error("Cannot find global object");
		},
		r = q(this),
		t = function (a, b) {
			if (b) a: {
				var c = r;a = a.split(".");
				for (var d = 0; d < a.length - 1; d++) {
					var f = a[d];
					if (!(f in c)) break a;
					c = c[f]
				}
				a = a[a.length - 1];d = c[a];b = b(d);b != d && null != b && p(c, a, {
					configurable: !0,
					writable: !0,
					value: b
				})
			}
		};
	t("Symbol", function (a) {
		if (a) return a;
		var b = function (g, e) {
			this.g = g;
			p(this, "description", {
				configurable: !0,
				writable: !0,
				value: e
			})
		};
		b.prototype.toString = function () {
			return this.g
		};
		var c = "jscomp_symbol_" + (1E9 * Math.random() >>> 0) + "_",
			d = 0,
			f = function (g) {
				if (this instanceof f) throw new TypeError("Symbol is not a constructor");
				return new b(c + (g || "") + "_" + d++, g)
			};
		return f
	});
	t("Symbol.iterator", function (a) {
		if (a) return a;
		a = Symbol("Symbol.iterator");
		for (var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c = 0; c < b.length; c++) {
			var d = r[b[c]];
			"function" === typeof d && "function" != typeof d.prototype[a] && p(d.prototype, a, {
				configurable: !0,
				writable: !0,
				value: function () {
					return u(l(this))
				}
			})
		}
		return a
	});
	var u = function (a) {
			a = {
				next: a
			};
			a[Symbol.iterator] = function () {
				return this
			};
			return a
		},
		v = function (a, b) {
			a instanceof String && (a += "");
			var c = 0,
				d = !1,
				f = {
					next: function () {
						if (!d && c < a.length) {
							var g = c++;
							return {
								value: b(g, a[g]),
								done: !1
							}
						}
						d = !0;
						return {
							done: !0,
							value: void 0
						}
					}
				};
			f[Symbol.iterator] = function () {
				return f
			};
			return f
		};
	t("Array.prototype.keys", function (a) {
		return a ? a : function () {
			return v(this, function (b) {
				return b
			})
		}
	});
	var w = "\" ' ( ) , - . / 0 1 2 : ? a about and are as be but com for from have i in is it like may more my next not of on search that the this to was when with you your".split(" "),
		x = !1,
		y = {},
		z = {},
		A = 0,
		B = -1,
		C = -1,
		D = function (a) {
			a = a.replace(/<[^>]*>/g, "");
			return a = a.replace(/[<>]/g, "")
		},
		E = function (a) {
			a = D(a);
			return a = a.substring(0, 100).toLowerCase()
		},
		G = function (a) {
			for (var b = 0, c = w.length; b < c; b++)
				if (a === w[b]) return !0;
			return !1
		},
		H = function (a, b, c) {
			"initialize" === a.type && c({
				instanceId: A++
			})
		},
		I = function (a) {
			"openOptionsPage" ===
			a.type && chrome.tabs.create({
				url: chrome.runtime.getURL("options.html")
			})
		},
		J = function (a, b, c) {
			"options" === a.type && c({
				options: y
			})
		},
		N = function (a, b, c) {
			if ("fetch_raw" !== a.type && "fetch_html" !== a.type) return !1;
			_gaq && _gaq.push(["_trackEvent", "lookup", a.type]); - 1 !== B && C !== a.instanceId && chrome.tabs.sendMessage(B, {
				type: "hide",
				instanceId: C
			});
			"fetch_raw" === a.type ? (B = b.tab.id, C = a.instanceId) : C = B = -1;
			var d = E(a.query),
				f = function () {
					var e = {
						request: a,
						sanitizedQuery: d,
						dictRes: null,
						enDictRes: null,
						tranRes: null,
						tabLangTranRes: null,
						tabLangTranReqTimedOut: !1,
						tabLang: null,
						numResponses: 0,
						callback: c,
						incognito: !1
					};

					// ORIGINAL CODE -- probably something to do with supporting other languages... we don't need it
					// K(d, y.language, function (m) {
					// 	e.dictRes = m;
					// 	console.warn("Render word called from unsupported context!");
					// 	console.warn(m);
					// 	renderWord(e);
					// });
					// "en" !== y.language ? K(d, "en", function (m) {
					// 	e.enDictRes = m;
					// 	console.warn("Render word called from unsupported context!");
					// 	console.warn(m);
					// 	renderWord(e)
					// }) : null;

					fetchWordDefinition(d, "auto", function (definition) {
						renderWord(definition, c);
					});

					// ORIGINAL CODE -- produced an unnecessary secondary request
					// chrome.tabs.getSelected(null, function (m) {
					// 	e.incognito = m.incognito;
					// 	var h = window.setTimeout(function () {
					// 		console.assert(null === e.tabLangTranRes);
					// 		e.tabLangTranReqTimedOut = !0;
					// 		renderWord({ success: false, error: "timeout"}, c);
					// 	}, 800);
					// 	chrome.tabs.detectLanguage(m.id, function (k) {
					// 		e.tabLangTranReqTimedOut || (window.clearTimeout(h),
					// 			"und" !== k ? (e.tabLang = "he" === k ? "iw" : k, fetchWordDefinition(d, e.tabLang, function (definition) {
					// 				renderWord(definition, c)
					// 			})) : renderWord({ success: false, error: "timeout"}, c))
					// 	})
					// })
				};
			if (x) f();
			else {
				var g = function (e) {
					if (x) return f();
					if (10 < e) return c({
						eventKey: a.eventKey,
						sanitizedQuery: d
					});
					window.setTimeout(function () {
						g(e + 1)
					}, 200)
				};
				g(0)
			}
			return !0
		},
		K = function (a, b, c) { // this function does not appear to do anything useful to us
			return;
			// var d = b;
			// "en-uk" == b && (d = "en");
			// var f = window["gdx.LANG_TO_CORPUS"][b];
			// f || (f = b);
			// a = {
			// 	path: "v1/dictionaryExtensionData",
			// 	params: {
			// 		term: a,
			// 		language: d,
			// 		corpus: f
			// 	}
			// };
			// (f = window["gdx.CORPUS_TO_COUNTRY"][f]) && (a.params.country = f);
			// console.warn(a);
			// gapi.client.request(a).execute(function (g) {
			// 	var e =
			// 		g.status;
			// 	if (e && 200 != e) c(null);
			// 	else {
			// 		g = O(g, "dictionaryData[0]");
			// 		if (!g) return c(null);
			// 		var m = function (h) {
			// 			if (!h.senseFamilies) return 0;
			// 			h = h.senseFamilies;
			// 			for (var k = h.length, n = 0; n < h.length; n++) h[n].senses && (k += .1 * h[n].senses.length);
			// 			return k
			// 		};
			// 		e = function (h, k) {
			// 			return m(k) - m(h)
			// 		};
			// 		g.entries && (g.entries = g.entries.sort(e));
			// 		g.webDefinitions && (g.hasWebDefinitions = !0);
			// 		c(g)
			// 	}
			// })
		},
		fetchWordDefinition = function (rawWord, b, renderCallback) {
			var word = encodeURIComponent(rawWord);
			var apiUrl = "https://api.dictionaryapi.dev/api/v2/entries/en/" + word;
			var req = new XMLHttpRequest;
			req.open("GET", apiUrl, !0);
			req.onload = function () {
				var parsed = {};

				switch(this.status) {
					case 200:
						try {
							parsed = JSON.parse(req.response);
							if(parsed.length && parsed.length > 0) {
								parsed = parsed[0];
								parsed.success = true;
							} else parsed = { success: false }
						} catch(err) {
							console.error(err);
							parsed = {
								success: false,
								error: null
							}
						}
						break;

					case 404:
						parsed.success = false;
						parsed.error = "This word is not in the dictionary.";
						break;

					default:
						parsed.success = false;
						parsed.error = null;
				}
				renderCallback(parsed);
			}
			req.send();

			// ORIGINAL REQUEST
			// a = "https://clients5.google.com/translate_a/single?dj=1&dt=t&dt=sp&dt=ld&dt=bd&client=dict-chrome-ex&sl=" + b + "&tl=" + y.language +
			// 	"&q=" + encodeURIComponent(a);
			// var d = new XMLHttpRequest;
			// d.open("GET", a, !0);
			// d.onload = function () {
			// 	var f = null;
			// 	if (200 === this.status) try {
			// 		f = JSON.parse(d.response)
			// 	}
			// 	catch (g) {}
			// 	return c(f)
			// };
			// d.send()
		},
		// render result
		renderWord = function (definition, callback) {
			console.log(callback);
			console.log(definition);
			callback(definition);
			// if (4 === a.numResponses) {
			// 	var b = P(a.dictRes),
			// 		c = b;
			// 	"en" !== y.language && (c = P(a.enDictRes));
			// 	var d = Q(a.tranRes, !0),
			// 		f = Q(a.tabLangTranRes, !0),
			// 		g = y.language.toLowerCase(),
			// 		e = !1,
			// 		m = null,
			// 		h = null;
			// 	f && a.tabLang !== g ? (e = !0, m = a.tabLangTranRes, h = f) : !b && d && (e = !0, m = a.tranRes, h = d);
			// 	e && c && c.audio && "en" === h.srcLang.toLowerCase() &&
			// 		(h.audio = c.audio);
			// 	c = e ? "translation" : "definition";
			// 	b || h || (c = "none");
			// 	_gaq && _gaq.push(["_trackEvent", "lookup", "type_" + c]);
			// 	d = encodeURIComponent(a.sanitizedQuery);
			// 	c = "";
			// 	e && (c = "https://translate.google.com/translate_t?source=dict-chrome-ex&sl=" + h.srcLang + "&tl=" + y.language + "&q=" + d);
			// 	d = R(d);
			// 	if ("fetch_html" === a.request.type) b = "", b = e ? S(m, h.audio, c) : T(a.dictRes, d), e = {
			// 		eventKey: a.request.eventKey,
			// 		sanitizedQuery: a.sanitizedQuery,
			// 		html: b
			// 	};
			// 	else {
			// 		var k = null,
			// 			n = null;
			// 		e ? (k = h, k.moreUrl = c) : b && (k = b, k.moreUrl = d, k.srcLang = y.language);
			// 		k && "true" === y.storeHistory && !a.incognito && chrome.storage.local.get("word-history", function (F) {
			// 			n = k.srcLang + "<" + y.language + "<" + a.sanitizedQuery;
			// 			F["word-history"][n] = k.meaningText;
			// 			chrome.storage.local.set(F)
			// 		});
			// 		k && !k.prettyQuery && (k.prettyQuery = a.sanitizedQuery);
			// 		e = !1;
			// 		("true" === y.popupDblclick && "none" === y.popupDblclickKey || "true" === y.popupSelect && "none" === y.popupSelectKey) && G(a.sanitizedQuery) && (e = !0);
			// 		e = {
			// 			eventKey: a.request.eventKey,
			// 			sanitizedQuery: a.sanitizedQuery,
			// 			meaningObj: k,
			// 			showOptionsTip: e
			// 		}
			// 	}
			// 	a.callback(e)
			// }
		},
		R = function (a) {
			var b = y.language;
			var c = (c = window["gdx.LANG_TO_DEFINE"][b]) ? c.replace("${term}", a) : "";
			var d = window["gdx.LANG_TO_CORPUS"][y.language];
			d || (d = y.language);
			a = "https://www.google.com/search?dictcorpus=" + d + "&hl=" + b + "&forcedict=" + a + "&q=" + c;
			"en-uk" === b && (a += "&gl=gb");
			return a
		},
		Q = function (a, b) {
			if (!a || !a.sentences || 0 === a.sentences.length || a.sentences[0].orig.toLowerCase() == a.sentences[0].trans.toLowerCase()) return null;
			var c = a.sentences[0].orig.toLowerCase();
			var d = a.sentences[0].trans.toLowerCase(),
				f = d;
			if (b && a.dict && 0 < a.dict.length) {
				b = 0;
				for (var g = a.dict.length; b < g; b++)
					for (var e = a.dict[b], m = 0, h = 0, k = e.terms.length; h < k && 2 > m; h++) {
						var n = e.terms[h].toLowerCase();
						0 < n.length && n !== c && n !== d && (f += ", " + n, m++)
					}
			}
			c = D(f);
			(d = window["gdx.LANG_TO_NAME"][a.src.toLowerCase()]) || (d = a.src);
			return {
				type: "translation",
				meaningText: c,
				attribution: "Translated from " + d,
				srcLang: a.src
			}
		},
		O = function (a, b) {
			b = b.split(".");
			for (var c = 0; c < b.length; c++) {
				var d = b[c];
				console.assert(d);
				if ("]" === d.charAt(d.length - 1)) {
					d = d.split("[");
					console.assert(2 ===
						d.length);
					var f = parseInt(d[1].slice(0, -1), 10);
					a = a[d[0]];
					if (!a) return null;
					a = a[f]
				} else a = a[d];
				if (!a) return null
			}
			return a
		},
		U = function (a) {
			return "//" === a.substr(0, 2) ? "https:" + a : a
		},
		P = function (a) {
			if (!a || a.error) return null;
			var b, c = null;
			if (b = O(a, "entries[0]")) c = {
				prettyQuery: b.syllabifiedHeadword || b.headword,
				meaningText: O(b, "senseFamilies[0].senses[0].definition.text"),
				attribution: "",
				audio: O(b, "phonetics[0].oxfordAudio"),
				type: "licensedDef"
			}, c.meaningText ? c.audio && (c.audio = U(c.audio)) : c = null;
			!c && (b = O(a, "webDefinitions[0]")) &&
				(c = b.sourceUrl, c = {
					meaningText: b.definition,
					attribution: '<a href="' + c + '">' + c + "</a>",
					type: "webDef"
				});
			if (!c) return null;
			b = c.meaningText;
			c.meaningText = b.charAt(0).toUpperCase() + b.slice(1);
			return c
		},
		S = function (a, b, c) {
			var d = Q(a, !1);
			if (!d) return "";
			b && (d.audio = b);
			a.tranResSummary = d;
			a.moreUrl = c;
			a.hasDict = !!a.dict && a.dict.length;
			return z.browser_action_tran(a)
		},
		T = function (a, b) {
			if (!a || a.error) return "";
			a.moreUrl = b;
			a.makeAudioUrl = function () {
				var d = this.oxfordAudio;
				return d ? U(d) : ""
			};
			var c = {};
			a.showOnlyOnce = function () {
				return function (d,
					f) {
					d = f(d);
					if (c[d]) return "";
					c[d] = !0;
					return d
				}
			};
			return z.browser_action_dict(a)
		},
		V = function (a) {
			var b = {};
			b.language = a.language || "en";
			var c = function (f, g) {
					var e = a[f];
					b[f] = g;
					"true" === e || "false" === e ? b[f] = e : "boolean" === typeof e && (b[f] = String(e))
				},
				d = function (f, g) {
					b[f] = a[f] || g
				};
			c("popupDblclick", "true");
			c("popupSelect", "false");
			c("enableHttps", "true");
			d("popupDblclickKey", "none");
			d("popupSelectKey", "ctrl");
			c("storeHistory", "false");
			c("allowCrossExtensionHistory", "false");
			"pt" === a.language && (b.language = "pt-BR");
			return b
		},
		W = function (a, b, c) {
			if ("false" === y.allowCrossExtensionHistory || "false" === y.storeHistory || !a || !a.getHistory) return !1;
			chrome.storage.local.get("word-history", function (d) {
				c(d["word-history"])
			});
			return !0
		},
		X = function (a, b) {
			var c = new XMLHttpRequest;
			c.open("GET", a, !0);
			c.onload = function () {
				var d = null;
				200 === this.status && (d = c.response);
				return b(d)
			};
			c.send()
		},
		Y = function () {
			var a = window.localStorage.options,
				b = {};
			a && (b = JSON.parse(a));
			y = V(b);
			window.localStorage.options = JSON.stringify(y);
			chrome.storage.local.get("word-history",
				function (c) {
					c["word-history"] || chrome.storage.local.set({
						"word-history": {}
					})
				});
			chrome.runtime.onMessage.addListener(H);
			chrome.runtime.onMessage.addListener(I);
			chrome.runtime.onMessage.addListener(J);
			chrome.runtime.onMessage.addListener(N);
			chrome.runtime.onMessageExternal.addListener(W)
		};
	window["gdx.updateOptions"] = function () {
		y = JSON.parse(window.localStorage.options)
	};
	window.initBackgroundPageAsync = function (a) {
		gapi.config.update("googleapis.config/root", "https://dictionaryextension-pa.googleapis.com");
		gapi.client.setApiKey("AIzaSyA6EEtrDCfBkHV8uU2lgGY-N383ZgAOo7Y");
		var b = function () {
				2 > Object.keys(z).length || (x = !0, a && a())
			},
			c = function (d) {
				Mustache.parse(d);
				return function (f) {
					return Mustache.render(d, f)
				}
			};
		X("templates/browser_action_dict.html", function (d) {
			z.browser_action_dict = c(d);
			b()
		});
		X("templates/browser_action_tran.html", function (d) {
			z.browser_action_tran = c(d);
			b()
		})
	};
	window.initBackgroundPage = Y;
	var Z = Z || !1;
	Z || Y();
})();
